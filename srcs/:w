/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_glob.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hponcet <hponcet@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/10/19 16:25:03 by hponcet           #+#    #+#             */
/*   Updated: 2016/10/19 21:14:40 by hponcet          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_21sh.h"
#include "ms_minishell.h"

char	**ft_glob(char **cmd)
{
	int		i;

	i = 1;
	while (cmd[i])
	{
		cmd[i] = ft_glob_replace(cmd[i]);
		i++;
	}
	ms_print_env(cmd);
	return (cmd);
}

char	*ft_glob_replace(char *cmd)
{
	char	**pth_cmd;
	char	*ret;

	pth_cmd = (char**)malloc(sizeof(char*) * 3);
	pth_cmd[2] = NULL;
	pth_cmd[1] = ft_strdup(cmd);
	ft_compl_getpath(pth_cmd);
	ft_putendl(pth_cmd[0]);
	ft_putendl(pth_cmd[1]);
	ret = ft_glob_makestr(pth_cmd[0], pth_cmd[1]);
	return (ret);
}

t_glob	*ft_glob_makefile(struct dirent *s_dir, char *path)
{
	t_glob			*file;

	file = (t_glob*)malloc(sizeof(t_compl));
	if (!file)
		return (NULL);
	file->name = ft_strdup(s_dir->d_name);
	file->path = ft_joinf("%s/%s", path, file->name);
	file->next = NULL;
	return (file);
}

char	*ft_glob_tglobtostr(t_glob *lst)
{
	char	*ret;
	t_glob	*list;

	list = lst;
	ret = NULL;
	while (list)
	{
		ft_joinf("%xs %s", ret, list->path);
		list = list->next;
	}
	return (ret);
}

void	ft_glob_sortchain(t_glob **ret, t_glob *file)
{
	t_glob	*tmp;

	tmp = *ret;
	if (!tmp)
	{
		*ret = file;
		return ;
	}
	while (tmp->next)
		tmp = tmp->next;
	tmp->next = file;
}

char	*ft_glob_makestr(char *path, char *find)
{
	DIR				*dirp;
	struct dirent	*s_dir;
	t_glob			*file;
	t_glob			*ret;
	char			*str;

	ret = NULL;
	if ((dirp = opendir(path)) == NULL)
		return (NULL);
	while ((s_dir = readdir(dirp)) != NULL)
	{
		if (ft_strcmp(s_dir->d_name, "..") == 0 || ft_strcmp(s_dir->d_name, ".")
				== 0)
			continue ;
		if (ft_glob_compare(find, s_dir->d_name) != 0)
		{
			file = ft_glob_makefile(s_dir, path);
			ft_glob_sortchain(&ret, file);
		}
	}
	closedir(dirp);
	str = ft_glob_tglobtostr(ret);
	return (str);
}

int		ft_glob_compare(char *s1, char *s2)
{
	if ((!*s1 && !*s2) || (*s1 == '*' && !*s2))		// fin de chaine
		return (1);
	else if (*s1 == '?' && *s2)						// ? : avance d'un char
		return (ft_glob_compare(s1 + 1, s2 + 1));
	else if (*s1 == '*' && s1[1] == '*')			// * : multiple *
		return (ft_glob_compare(s1 + 1, s2));

	else if (*s1 == '*' && *s2 == s1[1])			// * : match
		return (ft_glob_compare(s1 + 2, s2 + 1));

	else if (*s1 == '*' && *s2 != s1[1])			// * : avance sur s2
		return (ft_glob_compare(s1, s2 + 1));
	else if (*s1 == '\\' && (s1[1] == '*'			// \ : echapement
				|| s1[1] == '?' || s1[1] == '{' 
				|| s1[1] == '[') && *s2 == s1[1])
		return (ft_glob_compare(s1 + 2, s2 + 1));
	else if (*s1 == *s2)							// char identique
		return (ft_glob_compare(s1 + 1, s2 + 1));
	return (0);
}
